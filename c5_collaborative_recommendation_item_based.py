# -*- coding: utf-8 -*-
"""c5:collaborative_recommendation:item_based.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EAM3qc8eI1cFJP59qyOlkLEWjJ24bpDM
"""

# IMPORT PACKAGES
import numpy as np
import pandas as pd

# LOAD DATA
sample_rank_data = [
  {"critic": "Jack Matthews", "title": "Lady in the Water", "rating": 3.0},
  {"critic": "Jack Matthews", "title": "Snakes on a Plane", "rating": 4.0},
  {"critic": "Jack Matthews", "title": "You Me and Dupree", "rating": 3.5},
  {"critic": "Jack Matthews", "title": "Superman Returns", "rating": 5.0},
  {"critic": "Jack Matthews", "title": "The Night Listener", "rating": 3.0},
  {"critic": "Mick LaSalle", "title": "Lady in the Water", "rating": 3.0},
  {"critic": "Mick LaSalle", "title": "Snakes on a Plane", "rating": 4.0},
  {"critic": "Mick LaSalle", "title": "Just My Luck", "rating": 2.0},
  {"critic": "Mick LaSalle", "title": "Superman Returns", "rating": 3.0},
  {"critic": "Mick LaSalle", "title": "You Me and Dupree", "rating": 2.0},
  {"critic": "Mick LaSalle", "title": "The Night Listener", "rating": 3.0},
  {"critic": "Claudia Puig", "title": "Snakes on a Plane", "rating": 3.5},
  {"critic": "Claudia Puig", "title": "Just My Luck", "rating": 3.0},
  {"critic": "Claudia Puig", "title": "You Me and Dupree", "rating": 2.5},
  {"critic": "Claudia Puig", "title": "Superman Returns", "rating": 4.0},
  {"critic": "Claudia Puig", "title": "The Night Listener", "rating": 4.5},
  {"critic": "Lisa Rose", "title": "Lady in the Water", "rating": 2.5},
  {"critic": "Lisa Rose", "title": "Snakes on a Plane", "rating": 3.5},
  {"critic": "Lisa Rose", "title": "Just My Luck", "rating": 3.0},
  {"critic": "Lisa Rose", "title": "Superman Returns", "rating": 3.5},
  {"critic": "Lisa Rose", "title": "The Night Listener", "rating": 3.0},
  {"critic": "Lisa Rose", "title": "You Me and Dupree", "rating": 2.5},
  {"critic": "Toby", "title": "Snakes on a Plane", "rating": 4.5},
  {"critic": "Toby", "title": "Superman Returns", "rating": 4.0},
  {"critic": "Toby", "title": "You Me and Dupree", "rating": 1.0},
  {"critic": "Gene Seymour", "title": "Lady in the Water", "rating": 3.0},
  {"critic": "Gene Seymour", "title": "Snakes on a Plane", "rating": 3.5},
  {"critic": "Gene Seymour", "title": "Just My Luck", "rating": 1.5},
  {"critic": "Gene Seymour", "title": "Superman Returns", "rating": 5.0},
  {"critic": "Gene Seymour", "title": "The Night Listener", "rating": 3.0},
  {"critic": "Gene Seymour", "title": "You Me and Dupree", "rating": 3.5}
]

# PREPROCESS DATA
rating_df = pd.DataFrame(sample_rank_data)
rating_df.head()

# PIVOTING
pivot_table = pd.pivot_table(rating_df, index='critic',
                             columns='title', aggfunc=np.mean)

pivot_table = pivot_table.fillna(0)

pivot_table

# COSINE SIMILARITY
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import scale

similarity = pd.DataFrame(cosine_similarity(pivot_table.values), index=pivot_table.columns, columns=pivot_table.columns)

similarity

def predict(l):
    # finds the userIds corresponding to the top 5 similarities
    # calculate the prediction according to the formula
    return (pivot_table[l.index] * l).sum(axis=1) / l.sum()

res = similarity.apply(lambda col: ', '.join('{}'.format(mid[1]) for mid in col.fillna(
    predict(similarity[col.name].nlargest(3))).nlargest(3).index[1:]))
print(res)

# PEARSON SIMILARITY
pivot_table.corr()

# CORRELATED ITEMS TO THE NIGHT LISTENER
pivot_table.corr().iloc[4]

# MAKE PREDICTION





