# -*- coding: utf-8 -*-
"""c2:environment_setup_and_prerequisites.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dPblmadxWfus6R072u8OPlCz-9fgTmCX
"""

import numpy as np

"""# Getting Started with pandas"""

import pandas as pd # IMPORTING THE WHOLE PANDAS

from pandas import Series, DataFrame # SELECTING SOME FUNCTION FROM PANDAS

"""## Series"""

obj = pd.Series([5, 2, -5, 9]) # CREATING A SERIES FROM RANDOM FUNCTIONS

obj # PRINTING THE OBJECT

obj.values # PRINTING THE VALUES OF OBJECT AS ARRAYS

obj.index # THE RANGE OF THE OBJECT INDEX

# CREATE AN OBJECT WITH A PREDEFINED INDICES
obj2 = pd.Series([5, 2, -5, 9], index=['A', 'B', 'C', 'D'])

obj2.index

obj2['A'] # SELECING THE VALUE WITH INDEX `A`

obj2['D'] = 6          # SETTING THE VALUE WITH INDEX D
obj2[['C', 'A', 'D']]  # SELECTING WITH AN ARRAY OF INDICES

obj2[obj2 > 0] # SELECTING ALL VALUES GREATER THAN ZERO(POSITIVE VALUES)

obj2 * 2 # MULTIPLY OBJECT VALUE BY 2

obj2 ** 2 # POWER OBJECT VALUE BY 2

np.exp(obj2) # CALLING NUMPY FUNCTION ON THE PANDAS SERIES OBJECT

'B' in obj2 # CHECK IF THE INDEX INSIDE THE SERIES OBJECT OR NOT

# CHECK IF THE INDEX INSIDE THE SERIES OBJECT OR NOT(CASE SENSETIVE)
'b' in obj2

'E' in obj2

cities_data = {'Paris': 35000, 'London': 71000,
               'Cairo': 16000, 'Tokyo': 5000}
obj3 = pd.Series(cities_data) # CREATING A SERIES FROM JSON OBJECT

obj3 # A SERIES CREATED FROM JSON OBJECT

cities = ['Luxor', 'Tokyo', 'Berlin', 'Paris'] # GETTING NEW INDICES TO THE SERIES
obj4 = pd.Series(cities_data, index=cities)          # SELECTING BY INDEX OF THE SERIES
obj4

pd.isnull(obj4) # CHECKING IF THERE ARE NULLS

pd.notnull(obj4) # CHECKING IF THERE ARE NON NULLS

obj4.isnull() # CHECKING IF THERE ARE NULLS

obj3

obj4

obj3 + obj4

obj4.name = 'population' # RENAME THE SERIES
obj4.index.name = 'city' # RENAME THE INDEX COLUMN
obj4

obj

# SETTING THE OBJECT INDEX
obj.index = ['TOM HANKS', 'TOM CRUISE', 'WILL SMITH', 'MATT DAMON']

obj

"""## DataFrame"""

data = {'city': ['London', 'Cairo', 'Berlin', 'Tokyo', 'Paris', 'Rome'],
        'year': [2020, 2019, 2018, 2017, 2016, 2015],
        'population': [3.5, 2.7, 1.6, 2.4, 1.9, 3.0]}

frame = pd.DataFrame(data)  # CREATE A DATAFRAME FROM MULTI KEY JSON OBJECT

frame

frame.head() # PRINTING THE HEAD OF DATAFRAME (FIRST FIVE ROWS)

frame.tail() # PRINTING THE TAIL OF DATAFRAME (LAST FIVE ROWS)

# RENAMING DATAFRAME COLUMNS
pd.DataFrame(data,
             columns=['year', 'city', 'population'])

frame2 = pd.DataFrame(data,
                      columns=['year', 'city', 'population', 'debt'],      # RENAMING COLUMNS
                      index=['one', 'two', 'three', 'four', 'five', 'six']) # RENAMING ROWS

frame2

frame2.columns # PRINTING THE COLUMNS NAME

frame2['city'] # PRINTING THE STATE COLUMNS

frame2.year # PRINTING THE YEAR COLUMNS

frame2.loc['three'] # SELECTING THE THIRD ROW

frame2['debt'] = 16.5 # SETTING THE DEBT COLUMN TO A CERTAIN VALUE

frame2

frame2['debt'] = np.arange(6.)
frame2

val = pd.Series([-1.2, -1.5, -1.7],
                index=['two', 'four', 'five']) # SETTING FEW ROWS OF THE DATAFRAME
frame2['debt'] = val
frame2

frame2['north'] = frame2.city == 'Tokyo'
frame2

del frame2['north']
frame2.columns

# YOU WILL FIND HERE A MISSING VALUE
population = {'Cairo': {2020: 2.4, 2019: 2.9},
              'Berlin': {2020: 1.5, 2019: 1.7, 2018: 3.6}}

frame3 = pd.DataFrame(population)
frame3

frame3.T # TRANSPOSE THE WHOLE DATAFRAME

pd.DataFrame(population,
             index=[2020, 2019, 2018]) # SETTING INDEX

pdata = {'cairo': frame3['Cairo'][:-1],
         'berlin': frame3['Berlin'][:2]}

pd.DataFrame(pdata)

frame3.index.name = 'year'
frame3.columns.name = 'city'
frame3

frame3.values

frame2.values

"""## Index Objects"""

obj = pd.Series(range(3), index=['A', 'B', 'C'])

index = obj.index
index

index[1:]

index[1] = 'D'

labels = pd.Index(np.arange(3))

labels

obj2 = pd.Series([2.5, -1.25, 0], index=labels)
obj2

obj2.index is labels

frame3

frame3.columns

'cairo' in frame3.columns

2020 in frame3.index

dupicate_labels = pd.Index(['foo', 'foo', 'bar', 'bar'])
dupicate_labels

"""# Essential Functionality

## Reindexing
"""

obj = pd.Series([4.5, 7.2, -5.3, 3.6], index=['C', 'D', 'B', 'A'])
obj

obj2 = obj.reindex(['A', 'B', 'C', 'D', 'E'])
obj2

obj3 = pd.Series(['blue', 'green', 'yellow'], index=[0, 2, 4])
obj3

obj3.reindex(range(6), method='ffill')

frame = pd.DataFrame(np.arange(9).reshape((3, 3)),
                     index=['A', 'B', 'D'],
                     columns=['Cairo', 'Tokyo', 'London'])

frame

frame2 = frame.reindex(['A', 'B', 'C', 'D'])

frame2

cities = ['Cairo', 'London', 'Berlin']
frame.reindex(columns=cities)

frame.loc[['A', 'B', 'C', 'D'], cities]

"""## Dropping Entries from an Axis"""

obj = pd.Series(np.arange(5.), index=['A', 'B', 'C', 'D', 'E'])
obj

new_obj = obj.drop('C')

new_obj

obj.drop(['D', 'C'])

data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                    index=['Cairo', 'London', 'Tokyo', 'Rome'],
                    columns=['One', 'Two', 'Three', 'Four'])

data

data.drop(['London', 'Rome'])

data.drop('Three', axis=1)

data.drop(['Three', 'Four'], axis='columns')

obj.drop('C', inplace=True)

"""## Indexing, Selection, and Filtering"""

obj = pd.Series(np.arange(4.), index=['A', 'B', 'C', 'D'])
obj

obj['B']

obj[1]

obj[2:4]

obj[['B', 'A', 'D']]

obj[[1, 3]]

obj[obj < 2]

obj['A':'C']

obj['B':'C'] = 5
obj

data = pd.DataFrame(np.arange(16).reshape((4, 4)),
                    index=['Cairo', 'Tokyo', 'London', 'Rome'],
                    columns=['One', 'Two', 'Three', 'Four'])

data

data['Two']

data[['Three', 'One']]

data[:2]

data[data['Three'] > 5]

data < 5

data[data < 5] = 0
data

"""## Selection with loc and iloc"""

data.loc['Tokyo', ['Two', 'Three']]

data.iloc[2, [3, 0, 1]]

data.iloc[2]

data.iloc[[1, 2], [3, 0, 1]]

data.loc[:'Rome', 'Two']

data.iloc[:, :3][data.Three > 5]

"""## Integer Indexes"""

s = pd.Series(np.arange(3.))
s

s[-1]

s2 = pd.Series(np.arange(3.), index=['A', 'B', 'C'])
s2[-1]

s[:1]

s.loc[:1]

s.iloc[:1]

"""## Arithmetic and Data Alignment"""

s1 = pd.Series([7.3, -2.5, 3.4, 1.5],
               index=['a', 'c', 'd', 'e'])

s2 = pd.Series([-2.1, 3.6, -1.5, 4, 3.1],
               index=['a', 'c', 'e', 'f', 'g'])

s1

s2

s1 + s2

df1 = pd.DataFrame(np.arange(9.).reshape((3, 3)), columns=list('BCD'),
                   index=['Cairo', 'London', 'Tokyo'])

df2 = pd.DataFrame(np.arange(12.).reshape((4, 3)),
                   columns=list('CDE'),
                   index=['Rome', 'Cairo', 'London', 'Tokyo'])

df1

df2

df1 + df2

df1 = pd.DataFrame({'A': [1, 2]})

df2 = pd.DataFrame({'B': [3, 4]})

df1

df2

df1 - df2

df1 = pd.DataFrame(np.arange(12.).reshape((3, 4)),
                   columns=list('ABCD'))

df2 = pd.DataFrame(np.arange(20.).reshape((4, 5)),
                   columns=list('ABCDE'))

df2.loc[1, 'b'] = np.nan

df1

df2

df1 + df2

df1.add(df2, fill_value=0)

1 / df1

df1.rdiv(1)

df1.reindex(columns=df2.columns, fill_value=0)

"""## Operations between DataFrame and Series"""

arr = np.arange(12.).reshape((3, 4))

arr

arr[0]

arr - arr[0]

frame = pd.DataFrame(np.arange(12.).reshape((4, 3)),
                     columns=list('BDE'),
                     index=['Cairo', 'London', 'Tokyo', 'Rome'])

series = frame.iloc[0]

frame

series

frame - series

series2 = pd.Series(range(3), index=['D', 'E', 'F'])

frame + series2

series3 = frame['D']

frame

series3

frame.sub(series3, axis='index')

"""## Function Application and Mapping"""

frame = pd.DataFrame(np.random.randn(4, 3), columns=list('BDE'),
                     index=['Cairo', 'London', 'Tokyo', 'Rome'])

frame

np.abs(frame)

f = lambda x: x.max() - x.min()

frame.apply(f)

frame.apply(f, axis='columns')

def f(x):
  return pd.Series([x.min(), x.max()], index=['MIN', 'MAX'])

frame.apply(f)

format = lambda x: '%.2f' % x
frame.applymap(format)

frame['E'].map(format)

"""## Sorting and Ranking"""

obj = pd.Series(range(4), index=['D', 'A', 'B', 'C'])
obj.sort_index()

frame = pd.DataFrame(np.arange(8).reshape((2, 4)),
                     index=['three', 'one'],
                     columns=['d', 'a', 'b', 'c'])

frame.sort_index()

frame.sort_index(axis=1)

frame.sort_index(axis=1, ascending=False)

obj = pd.Series([5, 9, -1, 4])

obj.sort_values()

obj = pd.Series([5, np.nan, 9, np.nan, -1, 4])

obj.sort_values()

frame = pd.DataFrame({'B': [5, 9, -1, 4], 'A': [0, 1, 0, 1]})
frame

frame.sort_values(by='B')

frame.sort_values(by=['A', 'B'])

obj = pd.Series([5, 9, -1, 4, 1, 0, 1])

obj.rank()

obj.rank(method='first')

obj.rank(ascending=False, method='max')

frame = pd.DataFrame({'B': [5.5, 6, -6, 4], 'A': [0, 1, 0, 1],
                      'C': [-3, 1, 6, -1.5]})

frame

frame.rank(axis='columns')

"""## Axis Indexes with Duplicate Labels"""

obj = pd.Series(range(5), index=['A', 'A', 'B', 'B', 'C'])
obj

obj.index.is_unique

obj['A']

obj['C']

df = pd.DataFrame(np.random.randn(4, 3), index=['A', 'A', 'B', 'B'])
df

df.loc['B']

"""# Summarizing and Computing Descriptive Statistics"""

df = pd.DataFrame([[200, np.nan], [301, 55],
                   [np.nan, np.nan], [146, 278]],
                  index=['A', 'B', 'C', 'D'], columns=['ONE', 'TWO'])

df

df.sum()

df.sum(axis='columns')

df.mean(axis='columns', skipna=False)

df.idxmax()

df.cumsum()

df.describe()

obj = pd.Series(['A', 'A', 'B', 'C'] * 5)
obj.describe()

"""## Correlation and Covariance"""

# OR conda install pandas_datareader 
! pip install pandas_datareader

import pandas_datareader.data as web

whole_json_data = {ticker: web.get_data_yahoo(ticker)
                    for ticker in ['AAPL', 'IBM', 'MSFT', 'GOOG']}  

price = pd.DataFrame({ticker: data['Adj Close']
                      for ticker, data in whole_json_data.items()})
volume = pd.DataFrame({ticker: data['Volume']
                       for ticker, data in whole_json_data.items()})

returns = price.pct_change()
returns.tail()

returns['MSFT'].corr(returns['IBM'])

returns['MSFT'].cov(returns['IBM'])

returns.MSFT.corr(returns.IBM)

returns.corr()

returns.cov()

returns.corrwith(returns.IBM)

returns.corrwith(volume)

"""## Unique Values, Value Counts, and Membership"""

obj = pd.Series(['C', 'D', 'A', 'D', 'A', 'C', 'A', 'B', 'B', 'C', 'C', 'A'])

obj.unique()

obj.nunique()

obj.value_counts()

pd.value_counts(obj.values, sort=False)

obj

obj.isin(['B', 'C'])

obj[obj.isin(['B', 'C'])]

to_match_with = pd.Series(['C', 'C', 'A', 'B', 'B', 'C', 'A'])
unique_values = pd.Series(['C', 'B', 'A']) # OR to_match_with.unique()
pd.Index(unique_values).get_indexer(to_match_with)

data = pd.DataFrame({'Qu1': [1, 3, 4, 3, 4], 
                      'Qu2': [2, 3, 1, 2, 3],
                      'Qu3': [1, 5, 2, 4, 4]})

data

result = data.apply(pd.value_counts).fillna(0)
result